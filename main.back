package {
    import com.pubnub.PubNub;
    import flash.display.Sprite;
    //import flash.utils.setTimeout;

    public class Main extends Sprite {
        private var pubnub:Array;
 
        public function open(origin:String):void {
            pubnub.push(new PubNub({
                subscribe_key : "demo",
                origin        : origin,
                drift_check   : 5000,        // Re-calculate Time Drift
                ssl           : false,       // SSL
                message       : message,     // onMessage Receive
                idle          : idle,        // onPing Idle Message
                connect       : connect,     // onConnect
                reconnect     : reconnect,   // onReconnect
                disconnect    : disconnect   // onDisconnect
            }));
        }

        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // Add Channels
        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        public function add(channels:Array):void {
            for (var i:Number = 0; pubnub.length > i; i++) {
                pubnub[i].subscribe({ channels : channels });
            }
        }

        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // Remove Channels
        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        public function remove(channels:Array):void {
            for (var i:Number = 0; pubnub.length > i; i++) {
                pubnub[i].unsubscribe({ channels : channels });
            }
        }

        public function Main():void {
            pubnub = [];

            open("");                        // Geo1 KEEP EMPTY!
            open("pubsub-apac.pubnub.com");  // Geo2
            open("pubsub-emea.pubnub.com");  // Geo3
            open("pubsub-naatl.pubnub.com"); // Geo4
            open("pubsub-napac.pubnub.com"); // Geo5

            add([ 'a', 'b', 'c' ]);
        }

        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // Receive Each Message
        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        private function message(
            message:Object,
            channel:String,
            timetoken:String,
            age:Number
        ):void {
            trace('message:',message);
            trace('age:',age);
        }

        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // Network Connection Established (Ready to Receive)
        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        private function connect():void {
            trace('connected');
            trace('publishing...');
            pubnub[0].publish({
                channel  : 'b',
                message  : 'Hello!',
                response : function(r:Object):void {
                    trace('publish:',r);
                }
            });
        }

        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // Network Timetoken (Good) Sent by PubNub Upstream
        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        private function idle(timetoken:String):void {
            trace( 'idle: ', timetoken );
        }

        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // Disconnected (No Data)
        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        private function disconnect(event:Object):Boolean {
            trace( 'disconnected', event );

            // Resume Connection by Returning - TRUE -
            // By returning false, you can resume by issuing
            // an empty subscribe();
            return true;
        }

        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        // Reconnected (And we are Back!)
        // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        private function reconnect():void {
            trace('reconnected');
        }
    }
}
